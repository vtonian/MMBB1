!function (t) { var e; jQuery && (e = t(jQuery)), "function" == typeof define && define.amd && define("notify", function () { return e || t(jQuery) }) }(function (t) { var e = {}, i = {}, o = function (e) { return "string" == t.type(e) && (e = { message: e }), arguments[1] && (e = t.extend(e, "string" == t.type(arguments[1]) ? { status: arguments[1] } : arguments[1])), new s(e).show() }, s = function (o) { this.options = t.extend({}, s.defaults, o), this.uuid = "ID" + (new Date).getTime() + "RAND" + Math.ceil(1e5 * Math.random()), this.element = t(['<div class="alert notify-message control-label" style="border-width:1px;">', '<button type="button" class="close" aria-hidden="true">&times;</button>', "<div>" + this.options.message + "</div>", "</div>"].join("")).data("notifyMessage", this), "error" == this.options.status && (this.options.status = "danger"), this.element.addClass("alert-" + this.options.status), this.currentstatus = this.options.status, i[this.uuid] = this, e[this.options.pos] || (e[this.options.pos] = t('<div class="notify notify-' + this.options.pos + '"></div>').appendTo("body").on("click", ".notify-message", function () { t(this).data("notifyMessage").close() })) }; return t.extend(s.prototype, { uuid: !1, element: !1, timout: !1, currentstatus: "", show: function () { if (!this.element.is(":visible")) { var t = this; e[this.options.pos].css("zIndex", this.options.zIndex).show().prepend(this.element); var i = parseInt(this.element.css("margin-bottom"), 10); return this.element.css({ opacity: 0, "margin-top": -1 * this.element.outerHeight(), "margin-bottom": 0 }).animate({ opacity: 1, "margin-top": 0, "margin-bottom": i }, function () { if (t.options.timeout) { var e = function () { t.close() }; t.timeout = setTimeout(e, t.options.timeout), t.element.hover(function () { clearTimeout(t.timeout) }, function () { t.timeout = setTimeout(e, t.options.timeout) }) } }), this } }, close: function (t) { var o = this, s = function () { o.element.remove(), e[o.options.pos].children().length || e[o.options.pos].hide(), o.options.onClose.apply(o, []), delete i[o.uuid] }; this.timeout && clearTimeout(this.timeout), t ? s() : this.element.animate({ opacity: 0, "margin-top": -1 * this.element.outerHeight(), "margin-bottom": 0 }, function () { s() }) } }), s.defaults = { message: "", status: "default", timeout: 8e3, pos: "top-center", zIndex: 10400, onClose: function () { } }, t.notify = o });